setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("frontEnd.R")
source("backEnd.R")
shinyApp(ui, server)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("frontEnd.R")
source("frontEnd.R")
source("frontEnd.R")
source("backEnd.R")
shinyApp(ui, server)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("frontEnd.R")
source("backEnd.R")
shinyApp(ui, server)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("frontEnd.R")
source("backEnd.R")
shinyApp(ui, server)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("frontEnd.R")
source("backEnd.R")
shinyApp(ui, server)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("frontEnd.R")
source("frontEnd.R")
source("backEnd.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("frontEnd.R")
source("backEnd.R")
shinyApp(ui, server)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("frontEnd.R")
source("backEnd.R")
shinyApp(ui, server)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
install.packages("flexdashboard")
library(flexdashboard)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("frontEnd.R")
source("backEnd.R")
shinyApp(ui, server)
# load data in 'global' chunk so it can be shared by all users of the dashboard
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("frontEnd.R")
source("backEnd.R")
library(flexdashboard)
addDateRangeSelector("date")
addHourSlider()
addCategory()
addDateRangeSelector("date")
addHourSlider()
addCategory()
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20)
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
# addDateRangeSelector("date")
# addHourSlider()
# addCategory()
# load data in 'global' chunk so it can be shared by all users of the dashboard
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("backEnd.R")
# load data in 'global' chunk so it can be shared by all users of the dashboard
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("backEnd.R")
library(flexdashboard)
library(shiny)
source("frontEnd.R")
# selectInput("n_breaks", label = "Number of bins:",
#             choices = c(10, 20, 35, 50), selected = 20)
#
# sliderInput("bw_adjust", label = "Bandwidth adjustment:",
#             min = 0.2, max = 2, value = 1, step = 0.2)
addDateRangeSelector("date")
addHourSlider()
addCategory()
source("backEnd.R")
addWindPenetrationPlot()
source("backEnd.R")
source("frontEnd.R")
# selectInput("n_breaks", label = "Number of bins:",
#             choices = c(10, 20, 35, 50), selected = 20)
#
# sliderInput("bw_adjust", label = "Bandwidth adjustment:",
#             min = 0.2, max = 2, value = 1, step = 0.2)
addDateRangeSelector("date")
addHourSlider()
addCategory()
getwd()
source("backEnd.R")
styler:::style_selection()
addWindPenetrationPlot()
source("backEnd.R")
df = getForecastVsActual()
addWindPenetrationPlot <- function(){
ForecastVsActual <- reactive({
invalidateLater(60000, session)
getForecastVsActual() %>%
filter(between(as_date(df$Interval), input$date[1], input$date[2]) &
df$variable %in% input$Category) %>%
filter(between(Hour, input$Hour[1], input$Hour[2]))
})
output$line <- renderPlotly({
validate(need(nrow(ForecastVsActual()) > 0, "Data insufficient for plot"))
p1 <- ForecastVsActual() %>%
ggplot(aes(
x = Interval,
y = value,
col = variable,
text = paste(
"</br>Date: ",
Interval,
"</br>Value: ",
value,
"</br>Category: ",
variable
)
)) + geom_point() + geom_line() + theme_minimal() + labs(y = "Wind Penetration (%)", x = "Datetime", col = "Category")
ggplotly(p1, tooltip = c("text"))
})
}
addWindPenetrationPlot()
source("backEnd.R")
df = getForecastVsActual()
addWindPenetrationPlot <- function(){
ForecastVsActual <- reactive({
invalidateLater(60000, session)
getForecastVsActual() %>%
filter(between(as_date(df$Interval), input$date[1], input$date[2]) &
df$variable %in% input$Category) %>%
filter(between(Hour, input$Hour[1], input$Hour[2]))
})
renderPlotly({
validate(need(nrow(ForecastVsActual()) > 0, "Data insufficient for plot"))
p1 <- ForecastVsActual() %>%
ggplot(aes(
x = Interval,
y = value,
col = variable,
text = paste(
"</br>Date: ",
Interval,
"</br>Value: ",
value,
"</br>Category: ",
variable
)
)) + geom_point() + geom_line() + theme_minimal() + labs(y = "Wind Penetration (%)", x = "Datetime", col = "Category")
ggplotly(p1, tooltip = c("text"))
})
}
addWindPenetrationPlot()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("frontEnd.R")
source("backEnd.R")
shinyApp(ui, server)
# Chunk 1: global
# load data in 'global' chunk so it can be shared by all users of the dashboard
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("backEnd.R")
# Chunk 2: setup
library(flexdashboard)
library(shiny)
# Chunk 3
source("frontEnd.R")
# selectInput("n_breaks", label = "Number of bins:",
#             choices = c(10, 20, 35, 50), selected = 20)
#
# sliderInput("bw_adjust", label = "Bandwidth adjustment:",
#             min = 0.2, max = 2, value = 1, step = 0.2)
addDateRangeSelector("date")
addHourSlider()
addCategory()
# Chunk 4
source("backEnd.R")
df = getForecastVsActual()
addWindPenetrationPlot <- function(){
ForecastVsActual <- reactive({
invalidateLater(60000, session)
getForecastVsActual() %>%
filter(between(as_date(df$Interval), input$date[1], input$date[2]) &
df$variable %in% input$Category) %>%
filter(between(Hour, input$Hour[1], input$Hour[2]))
})
renderPlotly({
validate(need(nrow(ForecastVsActual()) > 0, "Data insufficient for plot"))
p1 <- ForecastVsActual() %>%
ggplot(aes(
x = Interval,
y = value,
col = variable,
text = paste(
"</br>Date: ",
Interval,
"</br>Value: ",
value,
"</br>Category: ",
variable
)
)) + geom_point() + geom_line() + theme_minimal() + labs(y = "Wind Penetration (%)", x = "Datetime", col = "Category")
ggplotly(p1, tooltip = c("text"))
})
}
addWindPenetrationPlot()
# Chunk 5
gendf = getGenMix()
addGenMixBarPlot <- function(){
genMixData <- reactive({
invalidateLater(60000, session)
# functionThatGetsData()
getGenMix()
})
renderPlotly({
validate(need(nrow(genMixData()) > 0, "Data insufficient for plot"))
p1 <-
ggplot(genMixData(),
aes(
x = variable,
y = value,
fill = variable,
text = paste("</br>Resource: ", variable, "</br>Energy (MWh): ", value)
)) +
geom_bar(position = "dodge", stat = "identity")+theme_classic() + labs(y = "Energy (MWh)", x = "Resources", fill = "Resources") +
theme_minimal()
ggplotly(p1, tooltip = c("text"))
})
}
addGenMixBarPlot()
